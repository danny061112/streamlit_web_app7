"""

🍀 当ファイルは、page6_1.py ページ用のPythonコードファイル
 
   
   🔷🔶当ファイルでは、画面上に以下の内容を表示する 🔷🔶
    
      1, テキストボックス
      2, ボタン（※ if文の条件式含む）
          
      3, テキストボックス等の入力項目から「カーソル」を離すと、
         その都度自動的に「リロード」されてしまうため（処理時間が掛かる）、
         「ボタン」が挿入される迄は「リロード」させないように
         with句を追加する
             
         ※ テキストボックス等の入力項目数が多くなればなるほど
            リロード回数がその分増えるので処理時間が無駄になる
            個々の入力項目からカーソルを離す度に「リロード」される 
                
      4, セレクトボックス       
      5, ラジオボタン
      6, マルチセレクトボックス（複数選択） 
 
         ※ 戻り値はリスト型なので、join()メソッドを使って「リストの要素」を
           カンマ区切りで結合してコマンドラインに表示する
 
      7, チェックボックス
      8, スライダー
      9, 日付
     10, カラーピッカー
        
 
""" 

# ====================================================================
# ライブラリをインポート
#
#  import ▲▲▲▲ : --------------> これはモジュール全体をインポートするときに使う
#
#   例）import math
#       こうすると、math モジュール内の全ての関数を使うことができる
#
#  from ●●●●  import ▲▲▲▲ : ---> これは特定の関数やクラスだけをインポートしたいときに使う
#
#   例）from math import sqrt
#      こうすると、math モジュールから、sqrt 関数だけをインポートできて、
# 　　　コードの中でそのまま sqrt() として使える
#
# ====================================================================
import streamlit as st              # Streamlitライブラリをインポート
import datetime                     # datetimeモジュールをインポートして日付や時間を操作


# ========================================================================
#  🔷🔶 「テキストボックス等」から入力があっても、「ボタン挿入」まで
#        「リロード」させないようにする 🔷🔶
#       
#         with st.form() を使う
#
#  👉引数：key='' ----> '  ' 内は、何か文字列を指定する
#                                      
#                            ※ 画面側から見えるものではないので
#                               自分が認識しやすい文字列を使えばよい
#
#
#  👉ポイント
#    ・ with 句内に含まれるウィジェット（部品）は、画面上に表示される際は囲まれる
#
#    ・Streamlitで、with 句を使ってフォームやコンテナを作成すると、
#      その中に配置されたウィジェットはグループ化され、視覚的に枠で囲まれる
#      これにより、関連するウィジェットが一つのまとまりとして扱われ、
#      ユーザーにとっても入力フォームや設定項目がわかりやすくなる
#
#    ・form()を使用することで、複数のウィジェットへの入力を一括して処理するため、
#      ユーザーがすべての入力を完了して「送信」ボタンを押すまで、
#      アプリケーションがリロードされないようにできる
#      これにより、入力中のデータが中途半端に処理されることを防ぐことができる
#
# ======================================================================== 
with st.form(key='profile_form'):              # st.form()メソッドを呼び出す 
        


    # -----------------------------------------------
    #  🚀 Webが画面上に「テキストボックス」を表示
    #
    #  👉引数
    #    　・第１引数：画面に表示するラベル#
    #
    #  👉ポイント
    #     ・テキストボックスの入力値を取得するタイミングは画面がリロードされた時
    #     ・テキストボックスからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    # 
    # ----------------------------------------------- 
    name = st.text_input('名前')                   # st.text_input()メソッドの引数には「画面に表示するラベル」を設定
                                                    # name オブジェクトには、テキストボックスに入力された値が代入される                                             
                                                                                                                                            
    address = st.text_input('住所')                # st.text_input()メソッドの引数には「画面に表示するラベル」を設定
                                                    # address オブジェクトには、テキストボックスに入力された値が代入される
    #print(name)   
    #print(address)   



    # -----------------------------------------------
    #  🚀 Webが画面上に「セレクトボックス（１つ選択）」を表示
    #
    #  👉引数（タプル形式）
    #    　・第１引数：画面に表示するラベル
    #      ・第２引数：選択肢             
    #
    #  👉ポイント
    #     ・セレクトボックスの入力値を取得するタイミングは画面がリロードされた時
    #     ・セレクトボックスからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    #
    # ----------------------------------------------- 
    s_age_category = st.selectbox(
        '年齢層', ('子供（18才未満）', '大人（18歳以上）'))  # st.selectbox()メソッドを呼び出す
                                                        # s_age_category オブジェクトには、セレクトボックスで選択された値が代入される
    #print(s_age_category)
    
    
    
    # -----------------------------------------------
    #  🚀 Webが画面上に「ラジオボタン」を表示
    #
    #  👉引数（タプル形式）
    #    　・第１引数：画面に表示するラベル
    #      ・第２引数：選択肢             
    #
    #  👉ポイント
    #     ・ラジオボタンの入力値を取得するタイミングは画面がリロードされた時
    #     ・ラジオボタンからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    #
    # ----------------------------------------------- 
    r_age_category = st.radio(
        '年齢層', ('子供（18才未満）', '大人（18歳以上）'))  # st.radio()メソッドを呼び出す
                                                        # r_age_category オブジェクトには、セレクトボックスで選択された値が代入される
    #print(r_age_category)
    
    
    
    # -----------------------------------------------
    #  🚀 Webが画面上に「マルチセレクトボックス（複数選択）」を表示
    #
    #  👉引数（タプル形式）
    #    　・第１引数：画面に表示するラベル
    #      ・第２引数：選択肢               
    #
    #  👉ポイント
    #     ・マルチセレクトの入力値を取得するタイミングは画面がリロードされた時
    #     ・マルチセレクトからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    #
    # ----------------------------------------------- 
    hobby = st.multiselect(
        '趣味',
        ('スポーツ', '読書', 'プログラム', 'アニメ',
        '映画', '釣り', '料理'))                          # st.multiselect()メソッドを呼び出す
                                                        # hobby オブジェクトには、マルチセレクトボックスで選択された値が「リスト型」で代入される
    #print(hobby)
    
    
    
    # -----------------------------------------------
    #  🚀 Webが画面上に「チェックボックス」を表示
    #
    #  👉引数（タプル形式）
    #    　・第１引数：画面に表示するラベル             
    #
    #  👉ポイント
    #     ・チェックボックスの入力値を取得するタイミングは画面がリロードされた時
    #     ・チェックボックスからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    #
    # ----------------------------------------------- 
    mail_subscribe = st.checkbox('メールマガジンを購読')   # st.checkbox()メソッドを呼び出す
                                                        # mail_subscribe オブジェクトには、チェックボックスで選択された値が代入される
    #print(mail_subscribe)
    
    
    
    # -----------------------------------------------
    #  🚀 Webが画面上に「スライダー」を表示
    #
    #  👉引数
    #    　・第１引数：画面に表示するラベル             
    #      ・第２引数：最小値     
    #      ・第３引数：最大値
    #
    #  👉ポイント
    #     ・スライダーの入力値を取得するタイミングは画面がリロードされた時
    #     ・スライダーからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    #
    # ----------------------------------------------- 
    height = st.slider('身長', min_value=110, max_value=210)   # st.slider()メソッドを呼び出す
                                                                # height オブジェクトには、スライダーで選択された値が代入される
    #print(height) 
    
    
    
    # -----------------------------------------------
    #  🚀 Webが画面上に「日付」を表示
    #
    #  👉引数（タプル形式）
    #    　・第１引数：画面に表示するラベル             
    #      ・第２引数：デフォルトの日付    
    #
    #  👉ポイント
    #     ・デイトインプットの入力値を取得するタイミングは画面がリロードされた時
    #     ・デイトインプットからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    #
    # ----------------------------------------------- 
    start_date = st.date_input(
        '開始日', datetime.date(2024, 11, 1))                 # st.date_input()メソッドを呼び出す
                                                                # start_date オブジェクトには、で指定した日付からのカレンダーが代入される
    #print(start_date) 
    
    
    
    # -----------------------------------------------
    #  🚀 Webが画面上に「カラーピッカー」を表示
    #
    #  👉引数
    #    　・第１引数：画面に表示するラベル             
    #      ・第２引数：デフォルトのカラー（RGB）指定     
    #
    #  👉ポイント
    #     ・カラーピッカーの入力値を取得するタイミングは画面がリロードされた時
    #     ・カラーピッカーからカーソルが外れた時に「画面自動的」にリロードされる
    #       （自分でリロードする必要はない）
    #
    #  🔴現在「ボタン挿入」まで、リロードしないロジックにしている
    #
    # ----------------------------------------------- 
    color= st.color_picker('テーマカラー', '#00f900')           # st.color_picker()メソッドを呼び出す
                                                                # color オブジェクトには、カラーピッカーで選択された値が代入される
    #print(color) 
    
    

    # -----------------------------------------------
    #  🚀 Webが画面上に「ボタン」を表示      
    #
    #  🔶注意🔶
    #     ✖ st.submit_botton   〇 st.form_submit_button 
    #                                             
    # -----------------------------------------------
    submit_btn = st.form_submit_button('送信')           # st.form_submit_button()メソッドの引数には「画面に表示するラベル」を設定  
                                                        # submit_btn オブジェクトには、ボタンの戻り値が代入される
                                                        #   挿入あり　---> True   挿入無し ---> False
                                            
    cancel_btn = st.form_submit_button('キャンセル')      # st.form_submit_button()メソッドの引数には「画面に表示するラベル」を設定  
                                                        # cancel_btn オブジェクトには、ボタンの戻り値が代入される
                                                        #   挿入あり　---> True   挿入無し ---> False

    #print(f'submit_btn: {submit_btn}')   
    #print(f'cancel_btn: {cancel_btn}')                                               
        
                                                                                            
                                                                                            
    # >>> 送信ボタン挿入時の処理 <<<<
    if submit_btn:
        st.text(f'ようこそ！{name}さん！{address}に書籍を送りました！')     # 「テキストボックス」で入力された氏名と住所を「テキスト」で表示  
        st.text(f'年齢層： {s_age_category}')                             # 「セレクトボックス」で選択された年齢層を「テキスト」で表示
        st.text(f'年齢層： {r_age_category}')                             # 「ラジオボタン」で選択された年齢層を「テキスト」で表示                                                                                                                    
        
        
        # >>> 表示編集 <<<
        #     戻り値（選択肢）「=hobby」には「リスト型」で入っているので、
        #     文字列の join() を使って「要素を","区切りで結合」した文字列で表示
        st.text(f'趣味： {", ".join(hobby)}')                             # 「マルチセレクトボックス」で選択された趣味を「テキスト」で表示                                                                                                                    
        
        
        st.text(f'購読： {mail_subscribe}')                               # 「チェックボックス」で入力された購読チェックを「テキスト」で表示  
        st.text(f'身長： {height}')                                       # 「スライダー」で入力された身長を「テキスト」で表示  
        st.text(f'開始日： {start_date}')                                 # 「日付」で入力された開始日を「テキスト」で表示
        st.text(f'テーマカラー： {color}')                                 # 「カラーピッカー」で入力されたテーマカラーを「テキスト」で表示    
    

